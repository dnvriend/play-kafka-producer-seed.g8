akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = debug
  stdout-loglevel = info
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    serialize-messages = off // when on, the akka framework will determine whether or not messages can be serialized, else the plugin

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }
}

akka.kafka.producer {
  kafka-clients {
    key.serializer = "io.confluent.kafka.serializers.KafkaAvroSerializer"
    key.serializer = ${?PRODUCER_KEY_SERIALIZER}
    value.serializer = "io.confluent.kafka.serializers.KafkaAvroSerializer"
    value.serializer = ${?PRODUCER_VALUE_SERIALIZER}
    schema.registry.url = "http://localhost:8081"
    schema.registry.url = ${?SCHEMA_REGISTRY_URL}
  }
}

akka.kafka.consumer {
  kafka-clients {
    enable.auto.commit = "true"
    enable.auto.commit = ${?CONSUMER_ENABLE_AUTO_COMMIT}
    auto.offset.reset = "earliest"
    auto.offset.reset = ${?CONSUMER_AUTO_OFFSET_RESET}
    key.deserializer = "io.confluent.kafka.serializers.KafkaAvroDeserializer"
    key.deserializer = ${?CONSUMER_KEY_DESERIALIZER}
    value.deserializer = "io.confluent.kafka.serializers.KafkaAvroDeserializer"
    value.deserializer = ${?CONSUMER_VALUE_DESERIALIZER}
    schema.registry.url = "http://localhost:8081"
    schema.registry.url = ${?SCHEMA_REGISTRY_URL}
  }
}